name: 🚀 Deploy to Google Cloud

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual deployment
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  PROJECT_ID: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
  FUNCTION_NAME: email-router
  REGION: us-central1

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔐 Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GOOGLE_CLOUD_SA_KEY }}
        
    - name: ☁️ Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
        
    - name: 🔧 Configure deployment environment
      run: |
        if [ "${{ github.event.inputs.environment }}" = "production" ]; then
          echo "FUNCTION_NAME=email-router-prod" >> $GITHUB_ENV
          echo "PUBSUB_TOPIC=email-inbound-prod" >> $GITHUB_ENV
        else
          echo "FUNCTION_NAME=email-router-staging" >> $GITHUB_ENV
          echo "PUBSUB_TOPIC=email-inbound-staging" >> $GITHUB_ENV
        fi
        
    - name: 🎯 Create Pub/Sub topic if not exists
      run: |
        gcloud pubsub topics create ${{ env.PUBSUB_TOPIC }} || echo "Topic already exists"
        
    - name: 📦 Prepare deployment package
      run: |
        cd functions/email_router
        ls -la
        
    - name: 🚀 Deploy to Cloud Functions
      run: |
        gcloud functions deploy ${{ env.FUNCTION_NAME }} \
          --gen2 \
          --runtime=python311 \
          --source=functions/email_router \
          --entry-point=pubsub_webhook \
          --trigger-topic=${{ env.PUBSUB_TOPIC }} \
          --region=${{ env.REGION }} \
          --set-env-vars=GOOGLE_CLOUD_PROJECT=${{ env.PROJECT_ID }} \
          --set-env-vars=PUBSUB_TOPIC=projects/${{ env.PROJECT_ID }}/topics/${{ env.PUBSUB_TOPIC }} \
          --memory=512MB \
          --timeout=540s \
          --max-instances=10 \
          --allow-unauthenticated=false
          
    - name: 🔧 Set up IAM permissions
      run: |
        # Allow Pub/Sub to invoke the function
        gcloud functions add-iam-policy-binding ${{ env.FUNCTION_NAME }} \
          --region=${{ env.REGION }} \
          --member=serviceAccount:service-${{ secrets.PROJECT_NUMBER }}@gcp-sa-pubsub.iam.gserviceaccount.com \
          --role=roles/cloudfunctions.invoker
          
    - name: ✅ Deployment verification
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "📍 Function: ${{ env.FUNCTION_NAME }}"
        echo "📍 Region: ${{ env.REGION }}"
        echo "📍 Trigger: ${{ env.PUBSUB_TOPIC }}"
        echo "📍 URL: https://console.cloud.google.com/functions/details/${{ env.REGION }}/${{ env.FUNCTION_NAME }}"
        
    - name: 📧 Test deployment (staging only)
      if: github.event.inputs.environment != 'production'
      run: |
        echo "🧪 Running deployment verification tests..."
        # Add basic smoke tests here
        gcloud functions describe ${{ env.FUNCTION_NAME }} --region=${{ env.REGION }}
        
  notify:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
    - name: 📢 Deployment notification
      run: |
        if [ "${{ needs.deploy.result }}" = "success" ]; then
          echo "✅ Deployment successful to ${{ github.event.inputs.environment || 'staging' }}"
        else
          echo "❌ Deployment failed to ${{ github.event.inputs.environment || 'staging' }}"
        fi 